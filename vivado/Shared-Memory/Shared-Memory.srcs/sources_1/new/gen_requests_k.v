// gen_requests_k_verilog.v
// Generates k (=K_LOG2) requests per each of 2^K_LOG2 cores.
// Packed word layout (MSB..LSB): [ rw (1b) | addr (ADDR_WIDTH b) | prio (PRI_BITS b) ]
// Output: "requests_K<K_LOG2>.mem"

`timescale 1ns/1ps
`include "config.vh"    // ADDR_WIDTH, PRI_BITS, K_LOG2, N_CORES


module gen_requests_k( );
// ---- Derived parameters ----
    localparam K_REQ = `K_LOG2;                    // requests per core
    localparam TOT_W = (1 + `ADDR_WIDTH + `PRI_BITS);

    // ---- Locals ----
    integer fd;
    integer c, i;
    integer seed;
    reg [`ADDR_WIDTH-1:0] addr;    // address field
    reg                   rw;      // 0=read, 1=write
    reg [`PRI_BITS-1:0]   prio;    // priority field
    reg [TOT_W-1:0]       packed;  // {rw, addr, prio}
    reg [8*256-1:0]       filename;// string buffer (256 chars)

    initial begin
        // Build file name with K_LOG2 value
        // If your Vivado dislikes $sformat, you can use $swrite instead.
        $sformat(filename, "requests_K%0d.mem", `K_LOG2);

        // Open output file
        fd = $fopen(filename, "w");
        if (fd == 0) begin
            $display("ERROR: cannot open %0s for write.", filename);
            $finish;
        end

        // Header
        $fdisplay(fd, "// %0s generated by gen_requests_k_verilog.v", filename);
        $fdisplay(fd, "// K_LOG2=%0d, N_CORES=%0d, K_REQ=%0d, PRI_BITS=%0d, ADDR_WIDTH=%0d, TOT_W=%0d",
                      `K_LOG2, `N_CORES, K_REQ, `PRI_BITS, `ADDR_WIDTH, TOT_W);
        $fdisplay(fd, "// columns: core_index  request_index  packed_hex");

        // Generate
        seed = 32'h1234_5678; // base seed
        for (c = 0; c < `N_CORES; c = c + 1) begin
            seed = seed ^ (c * 32'h9E37_79B1); // diversify per core

            for (i = 0; i < K_REQ; i = i + 1) begin
                // Randoms (Verilog-2001): $random updates 'seed'
                addr = $random(seed);                  // auto-truncates to ADDR_WIDTH
                rw   = $random(seed) & 1;              // LSB -> 0/1
                prio = $random(seed) % (1 << `PRI_BITS);

                // Pack [MSB..LSB] = [rw | addr | prio]
                packed = {rw, addr, prio};

                // Write line
                $fdisplay(fd, "%0d %0d %0h", c, i, packed);
            end
        end

        $fclose(fd);
        $display("DONE: wrote %0d cores Ã— %0d requests to %0s", `N_CORES, K_REQ, filename);
        $finish;
    end

endmodule
